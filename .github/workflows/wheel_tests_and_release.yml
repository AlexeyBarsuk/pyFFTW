name: Build Wheels and Release
on:
  push:
    branches:
      - cibuildwheel
    tags:
      - 'v*'
      - 'buildwheels*'
env:
  CIBW_BUILD_VERBOSITY: 2
  # Below is run within docker containers
  # Only relevant for Linux
  CIBW_TEST_REQUIRES: scipy dask
  CIBW_TEST_COMMAND: >
    python -c "import pyfftw; import numpy as np; from pyfftw.interfaces import numpy_fft as fft; np.testing.assert_allclose(fft.fft(np.zeros(8)), np.zeros(8));"

jobs:
  build_linux_wheels:
    name: Build python ${{ matrix.cibw_python }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        cibw_python: ["cp37-*", "cp38-*", "cp39-*", "cp310-*"]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Build the wheel
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_SKIP: "*-musllinux*"

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl

  build_macos_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11]
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.13"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install FFTW3 libraries
        run: |
          brew install fftw

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Build wheels for CPython (MacOS)
        run: |
          python -m cibuildwheel --output-dir dist

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl

  build_windows_wheels:
    # Only works for 64-bit.
    # 32-bit is likely possible, but probably not worth the time investment to get
    # working given low usage
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Download FFTW libraries
        run: |
          Write-Output "Downloading FFTW release (64 bit)"
          Invoke-WebRequest -Uri "https://fftw.org/pub/fftw/fftw-3.3.5-dll64.zip" -OutFile "${{ github.workspace }}\fftw.zip"
          Write-Output "Unzipping FFTW release"
          Expand-Archive -Path "${{ github.workspace }}\fftw.zip" -DestinationPath "${{ github.workspace }}\pyfftw"
        shell: powershell

        # Annoyingly these two next steps are needed as FFTW does not ship with
        # .lib files which msvc requires for linking
      - uses: ilammy/msvc-dev-cmd@v1
        name: Setup Visual Code build tools

      - name: Convert .def files to .lib
        run: |
          lib.exe /def:${{ github.workspace }}\pyfftw\libfftw3-3.def /out:${{ github.workspace }}\pyfftw\libfftw3-3.lib /machine:x64
          lib.exe /def:${{ github.workspace }}\pyfftw\libfftw3f-3.def /out:${{ github.workspace }}\pyfftw\libfftw3f-3.lib /machine:x64
          lib.exe /def:${{ github.workspace }}\pyfftw\libfftw3l-3.def /out:${{ github.workspace }}\pyfftw\libfftw3l-3.lib /machine:x64

      - name: Build Windows wheels for CPython (Win64)
        run: |
          python -m cibuildwheel --output-dir dist

      - uses: actions/upload-artifact@v2
        name: Upload wheels as artifacts
        with:
          name: wheels
          path: ./dist/*.whl


  deploy:
    name: Release
    needs: [build_linux_wheels, build_macos_wheels, build_windows_wheels]
    if: github.repository_owner == 'pyFFTW' && startsWith(github.ref, 'refs/tags/v') && always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - uses: actions/download-artifact@v2
        id: download
        with:
          name: wheels
          path: ./dist

      - name: Publish the source distribution on PyPI
        run: |
          PYFFTW_VERSION=$(git describe --tags)
          python setup.py sdist
          ls -la ${{ github.workspace }}/dist
          # We prefer to release wheels before source because otherwise there is a
          # small window during which users who pip install pyfftw will require compilation.
          twine upload ${{ github.workspace }}/dist/*.whl
          twine upload ${{ github.workspace }}/dist/pyfftw-${PYFFTW_VERSION:1}.tar.gz
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

      - name: Github release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
